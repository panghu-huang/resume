{"version":3,"sources":["services/ApiService.ts","services/index.ts","hooks/useTextAnimation.ts","containers/Personal.tsx","containers/AnimationStyles/index.tsx","components/Loading.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["Method","services_ApiService","ApiService","routeName","baseUrl","this","apiUrl","config","options","Object","keys","forEach","optionName","prototype","get","opts","fetch","tslib_es6","method","GET","post","POST","put","PUT","patch","PATCH","delete","DELETE","Promise","url","getUrl","getOptions","_a","sent","text","responseText","parseToJson","str","JSON","parse","error","path","data","querystring_es3","originalOpts","body","getRequestBody","stringify","window","location","origin","cid","defaultDelay","index","useTextAnimation","originalText","react","setText","key","String","length","timer","setInterval","clearInterval","onFinished","slice","interval","containers_Personal","infoText","dangerouslySetInnerHTML","__html","containers_AnimationStyles","lastFinished","styles","ref","calculatedStyles","current","scrollTo","Number","MAX_SAFE_INTEGER","className","prism","css","components_Loading","loading","loadingText","children","style","undefined","display","staticDirectory","replace","src_App","_super","App","props","_this","call","handleFinished","setState","isFinished","fetchInfo","console","error_1","fetchStyles","error_2","state","componentDidMount","render","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch","react_dom","document","getElementById","URL","toString","addEventListener","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4fccf7dd.chunk.js","sourcesContent":["import { stringify as queryStringify } from 'querystring'\n\nconst enum Method {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  PATCH = 'PATCH',\n  DELETE = 'DELETE',\n}\n\ntype OptionsGetter = (path: string, method: string) => object\n\ninterface IOptions {\n  path?: string\n  data?: object\n  headers?: Record<string, string>\n  mode?: 'same-origin' | 'cors' | 'navigate' | 'no-cors'\n}\n\ninterface IFetchOptions extends IOptions {\n  method: Method\n}\n\ninterface IConfigOptions {\n  baseUrl?: string\n  getOptions?: OptionsGetter\n}\n\nclass ApiService<T = any> {\n\n  public static baseUrl: string\n  public static getOptions: OptionsGetter\n\n  public static config(options: IConfigOptions) {\n    Object.keys(options).forEach((optionName: string) => {\n      ApiService[optionName] = options[optionName]\n    })\n  }\n\n  private readonly apiUrl: string\n\n  constructor(routeName: string, baseUrl?: string) {\n    this.apiUrl = `${baseUrl || ApiService.baseUrl}/${routeName}`\n  }\n\n  public get(opts?: IOptions) {\n    return this.fetch({ ...opts, method: Method.GET })\n  }\n\n  public post(opts?: IOptions) {\n    return this.fetch({ ...opts, method: Method.POST })\n  }\n\n  public put(opts?: IOptions) {\n    return this.fetch({ ...opts, method: Method.PUT })\n  }\n\n  public patch(opts?: IOptions) {\n    return this.fetch({ ...opts, method: Method.PATCH })\n  }\n\n  public delete(opts?: IOptions) {\n    return this.fetch({ ...opts, method: Method.DELETE })\n  }\n\n  public async fetch(opts: IFetchOptions): Promise<T> {\n    const url = this.getUrl(opts)\n    const options = this.getOptions(opts, url)\n    const response = await fetch(url, options)\n    const responseText = await response.text()\n    const json = this.parseToJson(responseText)\n    return json ? json : responseText\n  }\n\n  private parseToJson(str: string) {\n    try {\n      return JSON.parse(str)\n    } catch (error) {\n      return null\n    }\n  }\n\n  private getUrl(opts: IFetchOptions): string {\n    const url = opts.path\n      ? `${this.apiUrl}/${opts.path}`\n      : this.apiUrl\n    if (opts.method !== Method.GET || !opts.data) {\n      return url\n    }\n    return url + `?${queryStringify(opts.data as any)}`\n  }\n\n  private getOptions(originalOpts: IFetchOptions, url: string): RequestInit {\n    const { getOptions } = ApiService\n    return {\n      ...(getOptions ? getOptions(url, originalOpts.method) : {}),\n      ...originalOpts,\n      body: this.getRequestBody(originalOpts),\n    }\n  }\n\n  private getRequestBody(opts: IFetchOptions) {\n    if (opts.method === Method.GET || !opts.data) {\n      return null\n    }\n    return JSON.stringify(opts.data)\n  }\n\n}\n\nexport default ApiService\n","import ApiService from './ApiService'\n\nApiService.config({\n  baseUrl: window.location.origin,\n})\n\nexport {\n  ApiService,\n}\n","import * as React from 'react'\n\nexport interface IUseTextAnimationOptions {\n  text: string\n  interval?: number\n  onFinished?: () => void\n}\n\nlet cid = 0\nconst defaultDelay = process.env.NODE_ENV === 'production' ? 20 : 0\nconst index: { [key: string]: number } = {}\n\nexport function useTextAnimation(opts: IUseTextAnimationOptions): string {\n  const originalText = opts.text\n  const [text, setText] = React.useState('')\n  React.useEffect(() => {\n    const key = String(cid++)\n    index[key] = 0\n    const length = originalText.length\n    const timer = setInterval(() => {\n      if (index[key] >= length) {\n        clearInterval(timer)\n        opts.onFinished && opts.onFinished()\n      } else {\n        setText(originalText.slice(0, index[key]++))\n      }\n    }, opts.interval || defaultDelay)\n    return () => {\n      delete index[key]\n      clearInterval(timer)\n    }\n  }, [originalText])\n  return text\n}\n","import * as React from 'react'\nimport { useTextAnimation } from 'src/hooks'\n\nexport interface IPersonalProps {\n  infoText: string\n  onFinished: () => void\n}\n\nconst Personal: React.FunctionComponent<IPersonalProps> = ({\n  infoText, onFinished\n}) => {\n  if (!infoText) {\n    return null\n  }\n  const text = useTextAnimation({ text: infoText, onFinished })\n  return (\n    <div dangerouslySetInnerHTML={{ __html: text }}/>\n  )\n}\n\nexport default Personal\n\n","import * as React from 'react'\nimport * as Prism from 'prismjs'\nimport { useTextAnimation } from 'src/hooks'\nimport './styles.scss'\n\nexport interface IAnimationStylesProps {\n  lastFinished: boolean\n  styles: string\n}\n\nconst AnimationStyles: React.FunctionComponent<IAnimationStylesProps> = ({\n  lastFinished, styles\n}) => {\n  if (!lastFinished) {\n    return null\n  }\n  const ref = React.useRef<HTMLDivElement>(null)\n  const calculatedStyles = useTextAnimation({ text: styles, interval: 40 })\n  React.useEffect(() => {\n    const container = ref.current as HTMLDivElement\n    container.scrollTo(0, Number.MAX_SAFE_INTEGER)\n  }, [calculatedStyles])\n  return (\n    <div className='animation-styles' ref={ref}>\n      <style>\n        {calculatedStyles}\n      </style>\n      <div\n        className='content'\n        dangerouslySetInnerHTML={{\n          __html: Prism.highlight(calculatedStyles, Prism.languages.css, 'css')\n        }}\n      />\n    </div>\n  )\n}\n\nexport default AnimationStyles\n\n","import * as React from 'react'\n\nexport interface ILoadingProps {\n  loadingText: string\n  loading: boolean\n  children: React.ReactNode\n}\n\nconst Loading: React.FunctionComponent<ILoadingProps> = ({\n  loading, loadingText, children\n}) => {\n  const style = loading ? undefined : { display: 'none' }\n  return (\n    <div className=\"loading\">\n      <div className=\"loading-layer\" style={style}>\n        {loadingText}\n      </div>\n      {children}\n    </div>\n  )\n}\n\nexport default React.memo(Loading)\n\n","import * as React from 'react'\nimport { ApiService } from 'src/services'\nimport { Personal, AnimationStyles } from 'src/containers'\nimport { Loading } from 'src/components'\n\ninterface IAppState {\n  infoText: string\n  styles: '',\n  isFinished: boolean\n}\n\nconst staticDirectory = process.env.REACT_APP_STATIC_PATH\n  .replace('/', '')\n\nclass App extends React.Component<any, IAppState> {\n\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      infoText: '',\n      styles: '',\n      isFinished: false,\n    }\n  }\n\n  public componentDidMount(): void {\n    this.fetchStyles()\n    this.fetchInfo()\n  }\n\n  public render() {\n    const { infoText, styles, isFinished } = this.state\n    const loading = !(infoText && styles)\n    return (\n      <Loading\n        loadingText='稍等，正在下载模板...'\n        loading={loading}>\n        <div className='main-pane'>\n          <div className=\"text-pane\">\n            <Personal\n              infoText={infoText}\n              onFinished={this.handleFinished}\n            />\n          </div>\n          <div className=\"style-pane\">\n            <AnimationStyles\n              lastFinished={isFinished}\n              styles={styles}\n            />\n          </div>\n        </div>\n      </Loading>\n    )\n  }\n\n  private handleFinished = () => {\n    this.setState({ isFinished: true })\n  }\n\n  private fetchInfo = async () => {\n    try {\n      const service = new ApiService(staticDirectory)\n      const infoText = await service.get({ path: 'template.html' })\n      this.setState({ infoText })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  private fetchStyles = async () => {\n    try {\n      const service = new ApiService(staticDirectory)\n      const styles = await service.get({ path: 'styles.css' })\n      this.setState({ styles })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n}\n\nexport default App\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react'\nimport { render } from 'react-dom'\nimport App from './App'\nimport registerServiceWorker from './registerServiceWorker'\nimport './index.scss'\n\ndeclare global {\n  namespace NodeJS {\n    interface ProcessEnv {\n      REACT_APP_NAME: string\n      REACT_APP_STATIC_PATH: string\n    }\n  }\n}\n\nrender(\n  <App />,\n  document.getElementById('root') as HTMLElement,\n)\n\nregisterServiceWorker()\n"],"sourceRoot":""}